# -*- coding: utf-8 -*-
"""predictive.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b1wuvEThe69MSai-O2NdyxogxQ1TMZwQ

# Introduction
Saham merupakan salah satu instrumen investasi populer yang dipengaruhi oleh berbagai faktor internal maupun eksternal. Dalam proyek ini, saya akan membangun sistem prediksi arah tren harga saham harian (uptrend, downtrend, sideways) dengan menggunakan data historis saham BBRI (Bank Rakyat Indonesia) selama 7 tahun terakhir.

Tujuan dari proyek ini adalah untuk membantu investor memahami arah pergerakan harga dalam jangka pendek, sehingga dapat menjadi bahan pertimbangan dalam pengambilan keputusan investasi.

Metode yang digunakan dalam proyek ini adalah pendekatan klasifikasi berbasis machine learning. Selain itu, dilakukan juga eksperimen awal dengan model LSTM untuk memprediksi harga saham sebagai pendekatan regresi berbasis time series.
*   **Tujuan Proyek**: Proyek ini bertujuan untuk membangun sistem prediksi arah tren harga saham harian (uptrend, downtrend, atau sideways) menggunakan algoritma machine learning. Prediksi ini diharapkan dapat membantu investor atau analis pasar dalam membuat keputusan yang lebih tepat berdasarkan pola historis pergerakan harga.

*   **Data Understanding**:
Data yang digunakan adalah harga saham harian PT Bank Rakyat Indonesia Tbk (BBRI) selama 5 tahun terakhir. Dataset mencakup informasi harga pembukaan (Open), penutupan (Close), harga tertinggi (High), harga terendah (Low), dan volume transaksi harian selama 7 tahun dari 2018-2025
Dataset terdiri dari **1.730 entri harian** tanpa missing values, dan mencakup 6 kolom utama: `Date`, `Close`, `High`, `Low`, `Open`, dan `Volume`.
"""

!pip install yfinance --quiet

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

# Plot settings
sns.set_theme(style="darkgrid")
plt.rcParams['figure.figsize'] = (12, 6)

# Load Data

ticker = 'BBRI.JK'
start_date = '2018-01-01'
end_date = '2024-12-31'
bbri_df = yf.download(ticker, start=start_date, end=end_date)
bbri_df.reset_index(inplace=True)

bbri_df.to_csv('/content/drive/MyDrive/bbri_data.csv', index=False)

"""#EDA"""

print("ðŸ“Œ Data Teratas:")
display(bbri_df.head())

# Struktur dan info data
print("\nðŸ“Œ Info Data:")
bbri_df.info()

# Statistik deskriptif
print("\nðŸ“Œ Statistik Deskriptif:")
display(bbri_df.describe())

# Cek missing values
print("\nðŸ“Œ Missing Value per Kolom:")
print(bbri_df.isnull().sum())

# Plot harga penutupan (Close)
plt.figure(figsize=(14,6))
plt.plot(bbri_df['Date'], bbri_df['Close'], label='Close Price')
plt.title('Harga Penutupan Saham BBRI')
plt.xlabel('Tanggal')
plt.ylabel('Harga (IDR)')
plt.grid(True)
plt.legend()
plt.show()

"""Insight:
- Pada awal 2020 terjadi penurunan tajam yang kemungkinan besar disebabkan oleh dampak awal pandemi COVID-19.
- Setelah itu, harga mengalami pemulihan dan tren naik yang konsisten selama tahun 2021â€“2023.
- Puncak harga terjadi pada awal tahun 2024 sebelum kembali mengalami koreksi cukup tajam hingga pertengahan 2025.
- Pola pergerakan ini memperlihatkan dinamika tren harga yang dapat dikategorikan menjadi **uptrend**, **downtrend**, dan **sideways**, yang menjadi target dari sistem klasifikasi tren harga saham dalam proyek ini.
"""

# Plot volume transaksi
plt.figure(figsize=(14,4))
plt.plot(bbri_df['Date'], bbri_df['Volume'], color='gray')
plt.title('Volume Transaksi Saham BBRI')
plt.xlabel('Tanggal')
plt.ylabel('Volume')
plt.grid(True)
plt.show()

"""Insight:
- Volume transaksi cenderung meningkat secara drastis pada awal tahun 2020, yang kemungkinan berhubungan dengan ketidakpastian pasar global akibat pandemi COVID-19.
- Terdapat lonjakan volume yang signifikan di beberapa titik waktu lain, terutama pada pertengahan 2020, awal 2023, dan awal 2024, yang mungkin bertepatan dengan aksi korporasi, rilis laporan keuangan, atau sentimen pasar tertentu.
- Meski terdapat fluktuasi, secara umum volume berada dalam kisaran stabil setelah tahun 2021, dengan pola-pola lonjakan yang bisa dijadikan sinyal untuk mendeteksi potensi perubahan tren harga saham.
"""

# Korelasi antar fitur numerik
plt.figure(figsize=(10,6))
sns.heatmap(bbri_df.corr(numeric_only=True), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Matriks Korelasi Fitur Numerik')
plt.show()

"""ðŸ“Œ Insight:
- Terdapat korelasi **sempurna (1.00)** antara fitur harga seperti `Open`, `High`, `Low`, dan `Close`. Hal ini **masuk akal**, karena harga-harga tersebut berasal dari rentang waktu yang sama dalam satu hari perdagangan, sehingga mereka sangat terkait satu sama lain.
- **Volume** memiliki korelasi yang **sangat lemah (hampir nol)** terhadap semua fitur harga. Artinya, **volume transaksi tidak memiliki hubungan linier langsung dengan pergerakan harga harian**.
- Meskipun volume tidak berkorelasi secara linier, volume tetap bisa memiliki **pengaruh tidak langsung atau non-linier** terhadap tren atau volatilitas harga yang dapat ditangkap oleh model klasifikasi berbasis machine learning.

ðŸ“Œ Implikasi terhadap modeling:
- Karena `Open`, `High`, `Low`, dan `Close` sangat berkorelasi, kita bisa melakukan **reduksi dimensi atau memilih salah satu (misalnya Close) sebagai fitur utama harga**, atau mengubahnya menjadi **fitur turunan** seperti:
  - **Average Price** = (Open + High + Low + Close)/4
  - **High-Low Range** = High - Low
  - **Daily Return** = Close - Open
- Volume tetap dipertahankan karena bisa menangkap dinamika pasar yang tidak langsung tercermin dari harga.

# Data Preprocessing
"""

# Set kolom Date sebagai index
bbri_df['Date'] = pd.to_datetime(bbri_df['Date'])
bbri_df.set_index('Date', inplace=True)
bbri_df = bbri_df.sort_index()

# Fokus hanya pada kolom Close (harga penutupan)
df_close = bbri_df[['Close']].copy()

# Normalisasi
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
df_close['Normalized_Close'] = scaler.fit_transform(df_close[['Close']])

# Buat Windowing (Sequence) untuk LSTM

def create_sequences(data, window_size=30):
    sequences, targets = [], []
    for i in range(len(data) - window_size):
        seq = data[i:i+window_size]
        target = data[i+window_size]
        sequences.append(seq)
        targets.append(target)
    return np.array(sequences), np.array(targets)

normalized_values = df_close['Normalized_Close'].values
WINDOW_SIZE = 30
X, y = create_sequences(normalized_values, window_size=WINDOW_SIZE)
X = X.reshape((X.shape[0], X.shape[1], 1))

# Train-Test Split (berbasis waktu, bukan acak)
SPLIT_RATIO = 0.8
split_index = int(len(X) * SPLIT_RATIO)

X_train, X_test = X[:split_index], X[split_index:]
y_train, y_test = y[:split_index], y[split_index:]

print("X_train shape:", X_train.shape)
print("X_test shape :", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape :", y_test.shape)

"""# Modelling LSTM (Prediksi)"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

# Buat model LSTM sederhana
model = Sequential([
    LSTM(64, input_shape=(X_train.shape[1], 1), return_sequences=False),
    Dense(1)
])

# Compile model
model.compile(optimizer='adam', loss='mse', metrics=['mae'])

# Callback: EarlyStopping + ModelCheckpoint
early_stop = EarlyStopping(patience=10, restore_best_weights=True)
checkpoint = ModelCheckpoint('best_model_lstm.h5', save_best_only=True)

# Train model
history = model.fit(
    X_train, y_train,
    validation_data=(X_test, y_test),
    epochs=100,
    batch_size=32,
    callbacks=[early_stop, checkpoint],
    verbose=1
)

# Visualisasi loss
plt.figure(figsize=(10, 4))
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss Curve')
plt.xlabel('Epoch')
plt.ylabel('MSE Loss')
plt.legend()
plt.grid(True)
plt.show()

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Prediksi di data test
y_pred = model.predict(X_test)

# Kembalikan ke skala asli (dari Normalized â†’ Harga Asli)
y_test_inv = scaler.inverse_transform(y_test.reshape(-1, 1))
y_pred_inv = scaler.inverse_transform(y_pred)

# Evaluasi metrik
mae = mean_absolute_error(y_test_inv, y_pred_inv)
mse = mean_squared_error(y_test_inv, y_pred_inv)
rmse = np.sqrt(mse)
r2 = r2_score(y_test_inv, y_pred_inv)

print(f"ðŸ“ˆ Evaluation: LSTM Regression Model")
print(f"MAE : {mae:.2f}")
print(f"MSE : {mse:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"RÂ²  : {r2:.4f}")

# Buat DataFrame prediksi vs aktual
test_dates = df_close.index[WINDOW_SIZE + len(y_train):]  # offset: window + train
result_df = pd.DataFrame({
    'Date': test_dates,
    'Actual_Close': y_test_inv.flatten(),
    'Predicted_Close': y_pred_inv.flatten()
})
result_df.set_index('Date', inplace=True)

# Buat DataFrame prediksi vs aktual
test_dates = df_close.index[WINDOW_SIZE + len(y_train):]  # offset: window + train
result_df = pd.DataFrame({
    'Date': test_dates,
    'Actual_Close': y_test_inv.flatten(),
    'Predicted_Close': y_pred_inv.flatten()
})
result_df.set_index('Date', inplace=True)

# Plot hasil prediksi
plt.figure(figsize=(14, 6))
plt.plot(result_df['Actual_Close'], label='Actual Close')
plt.plot(result_df['Predicted_Close'], label='Predicted Close')
plt.title('Actual vs Predicted Close Price (Test Set)')
plt.xlabel('Date')
plt.ylabel('Close Price (IDR)')
plt.legend()
plt.grid(True)
plt.show()

"""Insight:
- Secara umum, prediksi model mampu mengikuti tren pergerakan harga dengan baik, terutama pada **fase uptrend dan downtrend yang jelas**.
- Terdapat beberapa deviasi antara prediksi dan aktual di area puncak atau lembah tajam, yang bisa disebabkan oleh **volatilitas ekstrem** atau **informasi eksternal** yang tidak tersedia dalam fitur dataset.
- Model menunjukkan performa cukup stabil dalam mengikuti pola naik-turun harian, yang berarti cukup mampu menangkap **temporal pattern** harga saham.
"""

# Simpan model LSTM
model.save('/content/drive/MyDrive/bbri_lstm_model.keras')

# Simpan scaler
import joblib
joblib.dump(scaler, '/content/drive/MyDrive/bbri_scaler.save')